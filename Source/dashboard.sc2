*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dashboard.scx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dataenvironment AS dataenvironment 
 	*< CLASSDATA: Baseclass="dataenvironment" Timestamp="" Scale="" Uniqueid="" ClassIcon="1" />

	DataSource = .NULL.
	Height = 0
	Left = 0
	Name = "Dataenvironment"
	Top = 0
	Width = 0

ENDDEFINE

DEFINE CLASS form1 AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oGauge" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="tmrGauge" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: drawgauges		&& Draws the gauges
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Sample Dashboard"
	DoCreate = .T.
	Height = 220
	Name = "Form1"
	Width = 358
	_memberdata = <VFPData>
		<memberdata name="drawgauges" display="DrawGauges"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'oGauge' AS gauge WITH ;
		Left = 10, ;
		Name = "oGauge", ;
		Top = 5
		*< END OBJECT: ClassLib="gauge.vcx" BaseClass="custom" />

	ADD OBJECT 'tmrGauge' AS timer WITH ;
		Height = 23, ;
		Interval = 2000, ;
		Left = 40, ;
		Name = "tmrGauge", ;
		Top = 5, ;
		Width = 23
		*< END OBJECT: BaseClass="timer" />
	
	PROCEDURE drawgauges		&& Draws the gauges
		* Draw the gauges
		
		This.LockScreen = .T.
		with This.oGauge
			.nSize           = This.oGauge1.Width
			.nBackColor      = rgb(0, 0, 0)
			.nBackColor2     = rgb(0, 0, 0)
			.nBand1Color     = rgb(255, 0, 0)
			.nBand3Color     = rgb(0, 255, 0)
			.nBand1End       = 50
			.nDialTextColor  = rgb(255, 0, 0)
			.nDigitsColor    = rgb(255, 255, 255)
			.nLabelColor     = rgb(255, 255, 255)
			.nLabelDistance  = 5
			.nMajorTickColor = rgb(255, 255, 255)
			.nMinorTickColor = rgb(255, 255, 255)
			for lnI = 1 to 8
				lcName = 'oGauge' + transform(lnI)
				do case
					case lnI = 1 or lnI = 7
						.nDialColor = rgb(0, 0, 0)
						.nValue     = 400 + 100 * rand(-1)
						.nMaxValue  = 800
					case lnI = 2 or lnI = 5
						.nDialColor = rgb(22, 85, 201)
						.nValue     = 1265 + 200 * rand(-1)
						.nMaxValue  = 1500
					case lnI = 3 or lnI = 8
						.nDialColor = rgb(87, 159, 159)
						.nValue     = 75 + 25 * rand(-1)
						.nMaxValue  = 200
					case lnI = 4 or lnI = 6
						.nDialColor = rgb(142, 253, 68)
						.nValue     = 12500 + 1000 * rand(-1)
						.nMaxValue  = 15000
				endcase
				.DrawGauge()
				This.&lcName..PictureVal = .cImage
			next lnI
		endwith
		This.LockScreen = .F.
		
	ENDPROC

	PROCEDURE Init
		* Add eight gauges to the form.
		
		local lnWidth, ;
			lnHeight, ;
			lnI, ;
			lcName
		lnWidth  = 0
		lnHeight = 0
		for lnI = 1 to 8
			lcName = 'oGauge' + transform(lnI)
			This.AddObject(lcName, 'Image')
			with This.&lcName
				.BorderStyle = 1
				store 200 to .Width, .Height
				if lnI > 4
					.Top = .Height
					.Left = (lnI - 5) * .Width
				else
					.Left = (lnI - 1) * .Width
				endif lnI > 4
				.Visible = .T.
				lnWidth  = .Left + .Width
				lnHeight = .Top  + .Height
			endwith
		next lnI
		This.Width  = lnWidth
		This.Height = lnHeight
		This.DrawGauges()
		
	ENDPROC

	PROCEDURE Resize
		* Resize all gauges as squares.
		
		local lnWidth, ;
			lnI, ;
			lcName
		lnWidth = This.Width / 4
		This.Height = This.Width / 2
		for lnI = 1 to 8
			lcName = 'oGauge' + transform(lnI)
			with This.&lcName
				store lnWidth to .Height, .Width
				if lnI > 4
					.Top = .Height
					.Left = (lnI - 5) * .Width
				else
					.Left = (lnI - 1) * .Width
				endif lnI > 4
			endwith
		next lnI
		This.DrawGauges()
		
	ENDPROC

	PROCEDURE tmrGauge.Timer
		Thisform.DrawGauges()
		
	ENDPROC

ENDDEFINE
